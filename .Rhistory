sunburst$parent = c("total - ")
sunburst$parent <- paste(sunburst$parent, sunburst$genres)
# Cria uma coluna nova chamada 'id' e depois adiciona conteúdo nela
sunburst$id = c(' - ')
sunburst$id <- paste(sunburst$parent, sunburst$id)
sunburst$id <- paste(sunburst$id, sunburst$label)
# converte a coluna "n" do data frame "generoCount" para o tipo numérico (numeric)
sunburst$n <- as.numeric(sunburst$n)
added <- aggregate(sunburst$n, list(sunburst$genres), FUN=sum)
# renomeando colunas
added <- rename(added, label = Group.1)
added <- rename(added, n = x)
# converte a coluna "n" do data frame "generoCount" para o tipo numérico (numeric)
added$n <- as.numeric(added$n)
# criando novas colunas ('genres', 'parent', 'id')
added$genres <- c(NA)
added$parent <- c('total')
added$id <- c(' - ')
added$id <- paste(added$parent, added$id)
added$id <- paste(added$id, added$label)
# Calcula a soma da coluna 'n'
total = sum(added$n)
# uniu (concatenou) as duas tabelas added e sunburst em uma nova tabela chamada sunburstFinal. A função rbind() foi usada para
# concatenar as tabelas pela sequência das linhas, ou seja, as linhas da tabela added foram adicionadas ao final da tabela sunburst.
sunburstFinal <- rbind(added, sunburst)
# adicionou uma nova linha no inicio com as informacoes para cada coluna dentro do rbind()
sunburstFinal2 <- rbind(c("total", total, NA, NA, "total"), sunburstFinal)
View(sunburstFinal2)
sunburstFinal2 <- sunburstFinal2[, -c(3)]
sunburstFinal2$n <- as.numeric(sunburstFinal2$n)
View(sunburstFinal2)
View(sunburstFinal)
# salvando em disco
write.csv(sunburstFinal2, "datasets_limpos/dataset3.csv", row.names = FALSE)
top10sunburst <- sunburstFinal2[-c(1:28),]
top10sunburst$n <- as.numeric(top10sunburst$n)
View(top10sunburst)
View(sunburstFinal2)
View(generoCount)
View(complete)
View(complete)
# carregando o dataframe
complete <- read_csv("datasets_limpos/dataset1.csv")
View(complete)
View(generoCount)
View(sunburstFinal2)
View(top10sunburst)
top10sunburst2 <- top10sunburst %>%
group_by(label) %>%
top_n(10, n)
View(top10sunburst2)
top10sunburst3 <- top10sunburst %>%
group_by(label) %>%
top_nnaa(10, n)
top10sunburst3 <- top10sunburst %>%
group_by(label) %>%
top_nn(10, n)
top10sunburst2 <- top10sunburst %>%
group_by(label) %>%
top_n(10, n)
View(top10sunburst2)
top10add <- aggregate(top10sunburst2$n, list(top10sunburst2$parent), FUN = sum)
View(top10add)
View(added)
View(added)
added <- rename(added, label = Group.1)
added <- aggregate(sunburst$n, list(sunburst$genres), FUN=sum)
View(added)
added <- rename(added, label = Group.1)
added <- rename(added, n = x)
# converte a coluna "n" do data frame "generoCount" para o tipo numérico (numeric)
added$n <- as.numeric(added$n)
View(added)
added$n <- as.numeric(added$n)
# criando novas colunas ('genres', 'parent', 'id')
added$genres <- c(NA)
added$parent <- c('total')
added$id <- c(' - ')
# adicionando conteudo para a coluna 'id'
added$id <- paste(added$parent, added$id)
added$id <- paste(added$id, added$label)
# renomeando colunas
top10add <- rename(top10add, id = Group.1)
top10add <- rename(top10add, n = x)
View(top10add)
# converte a coluna "n" do data frame "generoCount" para o tipo numérico (numeric)
top10add$n <- as.numeric(top10add$n)
top10add$label = sub("total - ", "", top10add$id)
View(top10add)
# agregacao para gerar um novo df chamado "top10add", contendo a soma dos valores de "n" para cada 'parent'.
top10add <- aggregate(top10sunburst2$n, list(top10sunburst2$parent), FUN = sum)
View(top10add)
top10add <- rename(top10add, id = Group.1)
top10add <- rename(top10add, n = x)
# converte a coluna "n" do data frame "generoCount" para o tipo numérico (numeric)
top10add$n <- as.numeric(top10add$n)
View(top10add)
top10antigo <- top10add
View(top10antigo)
# cria uma nova coluna label
top10add$label = sub("total - ", "", top10add$id)
View(top10add)
top10add$parent = c('total')
View(top10add)
total = sum(top10add$n)
top10sunburst2 <- rbind(top10add, top10sunburst2)
View(top10sunburst2)
View(sunburstFinal2)
top10sunburst2 <- rbind(c('total', total, NA, NA, 'total'), top10sunburst2)
top10sunburst3 <- rbind(c("total", total, NA, NA, "total"), top10sunburst2)
top10sunburst3 <- rbind(c("total", total, NA, NA), top10sunburst2)
View(top10sunburst3)
top10sunburst3 <- rbind(c("total", total, NA, NA, "total"), top10sunburst2)
total
# adiciono ao df top10sunburst2 todas as 16 linhas de top10add (as colunas possuem o mesmo nome)
top10sunburst2 <- rbind(top10add, top10sunburst2)
View(top10sunburst2)
top10sunburst3 <- rbind(c("total", total, NA, NA, "total"), top10sunburst2)
View(top10sunburst3)
top10sunburst4 <- rbind(c("total", total, NA, NA, "total"), top10sunburst2)
View(top10sunburst4)
# adiciono ao df top10sunburst2 todas as 16 linhas de top10add (as colunas possuem o mesmo nome)
top10sunburst2 <- rbind(top10add, top10sunburst2)
top10sunburst2 <- rbind(c("total", total, NA, NA, "total"), top10sunburst2)
View(top10sunburst2)
top10sunburst2 <- rbind(c("total", total, NA, "total"), top10sunburst2)
View(top10sunburst2)
top10sunburst2 <- rbind(c("total", total, NA, NA), top10sunburst2)
View(top10sunburst2)
# adiciono ao df top10sunburst2 todas as 16 linhas de top10add (as colunas possuem o mesmo nome)
top10sunburst2 <- rbind(top10add, top10sunburst2)
View(top10sunburst2)
top10sunburst2 <- rbind(c("total", total, NA, NA), top10sunburst2)
View(top10sunburst2)
top10sunburst2 <- top10sunburst %>%
group_by(label) %>%
top_n(10, n)
View(top10sunburst2)
# adiciono ao df top10sunburst2 todas as 16 linhas de top10add (as colunas possuem o mesmo nome)
top10sunburst2 <- rbind(top10add, top10sunburst2)
View(top10sunburst2)
top10sunburst2 <- rbind(c("total", total, NA, NA), top10sunburst2)
View(top10sunburst2)
View(top10sunburst2)
View(top10sunburst2)
# salva em disco
write.csv(top10sunburst2, "datasets_limpos/dataset4.csv", row.names = FALSE)
View(sunburstFinal2)
nototal <- sunburstFinal2[-c(1),]
View(nototal)
View(nototal)
# edita a coluna parent
nototal$parent = sub('total - ', '', nototal$parent)
View(nototal)
# edita a coluna
nototal$parent = sub('total', NA, nototal$parent)
View(nototal)
# edita a coluna id
nototal$id = sub('total - ', '', nototal$id)
View(nototal)
# edita a coluna id
nototal$id = sub('total - ', '', nototal$id)
topgenero <- read_csv("datasets_limpos/topgenero.csv")
# edita a coluna id
nototal$id = sub('total - ', '', nototal$id)
View(nototal)
# edita a coluna id
nototal$id = sub('total - ', '', nototal$id)
View(nototal)
# Elimina a primeira linha
nototal <- sunburstFinal2[-c(1),]
# edita a coluna 'parent' onde os valores dessa coluna são os mesmos da coluna 'parent', mas com a string "total - " removida.
nototal$parent = sub('total - ', '', nototal$parent)
# edita a coluna 'parent' onde os valores dessa coluna são os mesmos da coluna 'parent', mas onde tinha apenas 'total' ficar NA
nototal$parent = sub('total', NA, nototal$parent)
View(nototal)
View(nototal)
# edita a coluna id
nototal$id = sub('total - ', '', nototal$id)
View(nototal)
# edita a coluna id
nototal$id = sub('total  -  ', '', nototal$id)
View(nototal)
# salva em disco
write.csv(top10sunburst2, "datasets_limpos/dataset5.csv", row.names = FALSE)
# Carregando os dados de códigos ISO dos países
countrycode <- read.csv("datasets_originais/wikipedia-iso-country-codes.csv")
countrytree <- nototal[-c(1:28),]
View(countrytree)
View(nototal)
View(countrytree)
# renomeando colunas
countrytree <- rename(countrytree, parents = label)
# eliminou as primeiras 28 linhas
countrytree <- nototal[-c(1:28),]
View(countrytree)
# renomeando coluna 'label' para se chamar 'parents'
countrytree <- rename(countrytree, parents = label)
# renomeando coluna 'parent' para se chamar 'labels'
countrytree <- rename(countrytree, labels = parent)
View(countrytree)
countrytree$id = c(' - ')
View(countrytree)
countrytree$id <- paste(countrytree$parents, countrytree$id)
View(countrytree)
countrytree$id <- paste(countrytree$parent, countrytree$id)
View(countrytree)
# eliminou as primeiras 28 linhas
countrytree <- nototal[-c(1:28),]
# renomeando coluna 'label' para se chamar 'parents'
countrytree <- rename(countrytree, parents = label)
# renomeando coluna 'parent' para se chamar 'labels'
countrytree <- rename(countrytree, labels = parent)
# edita o conteudo da coluna 'id' para ' - '
countrytree$id = c(' - ')
View(countrytree)
countrytree$id <- paste(countrytree$parent, countrytree$id)
View(countrytree)
countrytree$id <- paste(countrytree$id, countrytree$label)
View(countrytree)
# eliminou as primeiras 28 linhas
countrytree <- nototal[-c(1:28),]
# renomeando coluna 'label' para se chamar 'parents'
countrytree <- rename(countrytree, parents = label)
# renomeando coluna 'parent' para se chamar 'labels'
countrytree <- rename(countrytree, labels = parent)
# edita o conteudo da coluna 'id' para ' - '
countrytree$id = c(' - ')
View(countrytree)
countrytree$id <- paste(countrytree$parents, countrytree$id)
View(countrytree)
countrytree$id <- paste(countrytree$id, countrytree$labels)
View(countrytree)
View(countrytree)
countries <- aggregate(countrytree$n, list(countrytree$parents), FUM = sum)
countries <- aggregate(countrytree$n, list(countrytree$parents), FUN = sum)
View(countries)
countries <- rename(countries, id = Group.1)
countries <- rename(countries, n = x)
View(countries)
View(countries)
# renomeando colunas
countries <- rename(countries, labels = id)
# renomeando colunas
countries <- rename(countries, labels = Group.1)
countries <- as.numeric(countries$n)
# agregacao para gerar um novo df chamado "countries", contendo a soma dos valores de "n" para cada 'parents'.
countries <- aggregate(countrytree$n, list(countrytree$parents), FUN = sum)
View(countries)
# renomeando colunas
countries <- rename(countries, labels = Group.1)
countries <- rename(countries, n = x)
View(countries)
# convertendo para numerico
countries <- as.numeric(countries$n)
View(countries)
# agregacao para gerar um novo df chamado "countries", contendo a soma dos valores de "n" para cada 'parents'.
countries <- aggregate(countrytree$n, list(countrytree$parents), FUN = sum)
countries <- rename(countries, labels = Group.1)
countries <- rename(countries, n = x)
# convertendo para numerico
countries$n <- as.numeric(countries$n)
View(countries)
countries$id <- countries$labels
View(countries)
countries$parents <- c(NA)
countrytreeFinal <- rbind(countrytree, countries)
View(countrytreeFinal)
# salva em disco
write.csv(countrytreeFinal, "datasets_limpos/dataset6.csv", row.names = FALSE)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
getwd()
gc()
funcionarios1 <- data.frame(id = c(1, 2, 3, 4, 5),
nome = c("João", "Maria", "Pedro", "Julia", "Felipe"),
idade = c(20, 25, 30, 35, 40))
funcionarios2 <- data.frame(id = c(1, 2, 3, 6),
salario = c(2000, 2500, 3000, 3500),
estado_civil = c("Solteiro", "Casado", "Casado", "Divorciado"))
View(funcionarios1)
View(funcionarios2)
# mesclar as tabelas com base no id do funcionário
funcionarios_completos <- merge(funcionarios1, funcionarios2, by = "id", all = TRUE)
# imprimir a tabela combinada
View(funcionarios_completos)
vendas <- data.frame(id_venda = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
id_cliente = c(2, 3, 1, 1, 2, 3, 4, 4, 1, 2),
id_produto = c(1, 3, 5, 2, 4, 1, 5, 4, 3, 2),
quantidade = c(2, 1, 4, 3, 2, 5, 1, 3, 4, 2))
clientes <- data.frame(id_cliente = c(1, 2, 3, 4, 5),
nome_cliente = c("João", "Maria", "Pedro", "Julia", "Felipe"),
cidade = c("São Paulo", "Rio de Janeiro", "Belo Horizonte", "Porto Alegre", "Recife"))
produtos <- data.frame(id_produto = c(1, 2, 3, 4, 5),
nome_produto = c("Arroz", "Feijão", "Macarrão", "Azeite", "Leite"),
categoria = c("Alimentos", "Alimentos", "Alimentos", "Óleos e Temperos", "Laticínios"))
View(vendas)
View(clientes)
View(produtos)
# imprimir a tabela combinada
View(vendas_completas)
# mesclar as tabelas com base nos ids de cliente e produto
vendas_completas <- merge(merge(vendas, clientes, by = "id_cliente", all = FALSE),
produtos, by = "id_produto", all = FALSE)
# imprimir a tabela combinada
View(vendas_completas)
# mesclar as tabelas com base nos ids de cliente e produto
vendas_completas <- merge(merge(vendas, clientes, by = "id_cliente", all = TRUE),
produtos, by = "id_produto", all = TRUE)
# imprimir a tabela combinada
View(vendas_completas)
# mesclar as tabelas com base nos ids de cliente e produto
vendas_completas <- merge(merge(vendas, clientes, by = "id_cliente", all = FALSE),
produtos, by = "id_produto", all = FALSE)
tabela1 <- data.frame(id = c(1, 2, 3), valor1 = c(10, 20, 30))
tabela2 <- data.frame(identificador = c(1, 2, 3), valor2 = c(40, 50, 60))
View(tabela1)
View(tabela2)
# mesclar as duas tabelas com base no id
tabela_completa <- merge(tabela1, tabela2, by.x = "id", by.y = "identificador")
# imprimir a tabela combinada
View(tabela_completa)
tabela1 <- data.frame(id = c(1, 2, 3), valor1 = c(10, 20, 30))
tabela2 <- data.frame(identificador = c(1, 2, 3), valor2 = c(40, 50, 60))
tabela3 <- data.frame(chave = c(1, 2, 3), valor3 = c(70, 80, 90))
View(tabela1)
View(tabela2)
View(tabela3)
# mesclar as três tabelas com base no id, identificador e chave
tabela_completa <- merge(merge(tabela1, tabela2, by.x = "id", by.y = "identificador"), tabela3, by.x = "id", by.y = "chave")
# imprimir a tabela combinada
View(tabela_completa)
# Criação dos dados
frutas <- data.frame(
tipo = c("maçã", "maçã", "banana", "banana", "laranja", "laranja"),
peso = c(100, 120, 80, 90, 70, 80)
)
View(frutas)
# Calcula a média do peso por tipo de fruta
media <- aggregate(peso ~ tipo, data = frutas, mean)
View(media)
# Criação dos dados
temperatura <- data.frame(
cidade = c("Paris", "Londres", "Madrid", "Barcelona", "Roma", "Milão"),
país = c("França", "Reino Unido", "Espanha", "Espanha", "Itália", "Itália"),
temperatura = c(10, 8, 25, 27, 15, 18)
)
View(temperatura)
# Calcula o mínimo e o máximo da temperatura por país
temp_pais <- aggregate(temperatura ~ país, data = temperatura, function(x) c(min = min(x), max = max(x)))
View(temp_pais)
# Criação dabase de dados "animais"
animais <- data.frame(
tipo = c("mamífero", "reptil", "ave", "mamífero", "reptil", "ave"),
peso = c(120, 50, 2, 80, 10, 0.5)
)
View(animais)
animaisMedia <- aggregate(x = animais$peso, by = list(animais$tipo), FUN = mean)
View(animaisMedia)
# Criação dos dados
frutas <- data.frame(
tipo = c("maçã", "maçã", "banana", "banana", "laranja", "laranja"),
peso = c(100, 120, 80, 90, 70, 80)
)
View(frutas)
View(animais)
media2 <- aggregate(frutas$peso, list(frutas$tipo), FUN = mean)
View(media2)
View(media)
animaisMedia <- aggregate(data = animais, peso ~ tipo, mean)
animaisMedia2 <- aggregate(x = animais$peso, by = list(animais$tipo), FUN = mean)
View(animaisMedia)
View(animaisMedia)
View(animaisMedia2)
# Criação da base de dados "vendas"
vendas <- data.frame(
categoria = c("eletrônicos", "vestuário", "alimentos", "eletrônicos", "alimentos", "vestuário"),
valor = c(1000, 500, 200, 800, 300, 700)
)
View(vendas)
vendasValor <- aggregate(x = vendas$valor, by = list(vendas$categoria), FUN = sum)
View(vendasValor)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
getwd()
# Criação da base de dados "pacientes"
pacientes <- data.frame(
id = 1:5,
nome_completo = c("João Silva", "Maria Santos", "Pedro Costa", "Ana Oliveira", "Luiz Souza")
)
View(pacientes)
# Separar a coluna "nome_completo" em duas colunas: "primeiro_nome" e "sobrenome"
library(tidyr)
# Carregando pacote necessário
library(tidyr)
# Criação da base de dados "pacientes"
pacientes <- data.frame(
id = 1:5,
nome_completo = c("João Silva", "Maria Santos", "Pedro Costa", "Ana Oliveira", "Luiz Souza")
)
pacientes_separados <- separate(pacientes, col = nome_completo, into = c("primeiro_nome", "sobrenome"), sep = " ")
# Exibir o resultado
View(pacientes_separados)
# Criação da base de dados
datas <- data.frame(
data_completa = c("2022-01-01", "2022-02-15", "2022-03-30")
)
View(datas)
# Usando a função separate() para dividir em três colunas
datas_separadas <- separate(datas, data_completa, c("ano", "mes", "dia"), sep = "-")
View(datas_separadas)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo")
)
View(funcionarios)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
View(funcionarios)
funcionarios_separados <- separate(funcionarios, departamento, into = c("area", "localizacao"), sep = " / ")
View(funcionarios_separados)
funcionarios_separados <- separate(funcionarios_separados, nome_completo, into = c("nome", "sobrenome"), sep = " ")
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
funcionarios_separados <- separate(funcionarios_separados, nome_completo, into = c("nome", "sobrenome"), sep = " ")
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
funcionarios_separados <- separate(funcionarios, departamento, into = c("area", "localizacao"), sep = " / ")
funcionarios_separados <- separate(funcionarios_separados, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios <- data.frame(
nome_completo = c("João Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios_separados2 <- separate(funcionarios_separados, departamento, into = c("area", "localizacao"), sep = " / ")
View(funcionarios_separado2)
funcionarios_separados2 <- separate(funcionarios_separados, departamento, into = c("area", "localizacao"), sep = " / ")
View(funcionarios_separados2)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
View(funcionarios)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios$nome_completo <- gsub("\\s+", " ", funcionarios$nome_completo) # remove espaços em excesso
View(funcionarios)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = " ")
View(funcionarios_separados)
funcionarios$nome_completo <- gsub("\\s+", " ", funcionarios$nome_completo) # remove espaços em excesso
View(funcionarios)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = "\\s+")
View(funcionarios_separados)
funcionarios <- data.frame(
nome_completo = c("João da Silva", "Maria Souza", "Pedro Rodrigues", "David Gilmour", "Alan Boksic"),
cargo = c("Gerente de Vendas", "Analista de Marketing", "Assistente de RH", "Desenvolvedor R", "Analista de Dados"),
departamento = c("Vendas / São Paulo", "Marketing / Rio de Janeiro", "RH / São Paulo", "TI / Alagoas", "RH / Paraná")
)
funcionarios_separados <- separate(funcionarios, nome_completo, into = c("nome", "sobrenome"), sep = "\\s+")
funcionarios_separados_extr <- tidyr::extract(funcionarios, nome_completo, into = c("nome", "sobrenome"), regex = "^(\\S+)\\s(\\S+)$")
View(funcionarios_separados_extr)
funcionarios_separados_extr <- extract(funcionarios, nome_completo, into = c("nome", "sobrenome"), regex = "(\\w+)\\s(\\w+)$")
View(funcionarios_separados_extr)
funcionarios_separados_extr <- extract(funcionarios, nome_completo, into = c("nome", "sobrenome"), regex = "(\\w+)\\s(\\w+)$")
View(funcionarios_separados_extr)
funcionarios_separados_extr <- extract(funcionarios, nome_completo, into = c("nome", "sobrenome"), regex = "(\\w+)\\s+(\\w+\\s*\\w*)")
View(funcionarios_separados_extr)
dados <- data.frame(aluno = c("Ana", "Beto", "Clara"),
prova1 = c(7, 8, 6),
prova2 = c(9, 8, 7),
prova3 = c(6, 5, 8))
View(dados)
dados_long <- pivot_longer(dados, cols = c(prova1, prova2, prova3),
names_to = "prova", values_to = "nota")
View(dados_long)
setwd("C:/Users/Julia/Desktop/CienciaDeDados/1.Big-Data-Analytics-com-R-e-Microsoft-Azure-Machine-Learning/4.Linguagem-R-Graficos/BigDataNaPratica_NetFlix")
getwd()
# Criando os dados de exemplo
dados_covid <- data.frame(
estado = c("SP", "RJ", "MG"),
casos_0_10 = c(100, 80, 120),
casos_11_20 = c(200, 150, 180),
casos_21_30 = c(300, 200, 250)
)
View(dados_covid)
# Usando a função pivot_longer() para transformar as colunas de faixa etária em uma única coluna
dados_covid_long <- pivot_longer(dados_covid,
cols = c(casos_0_10, casos_11_20, casos_21_30),
names_to = "faixa_etaria",
values_to = "casos")
View(dados_covid_long)
